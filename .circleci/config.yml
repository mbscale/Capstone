version: 2.1
jobs:
  build-app:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: verify the system
          command: |
            ls -Rla ~/
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint


  build-container:
    docker:
      - image: circleci/golang:1.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS  # context / project UI env-var reference
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false

      # build and push Docker image
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          docker build --tag mbscale/capstoneapp-$CIRCLE_WORKFLOW_ID .
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker tag mbscale/capstoneapp-$CIRCLE_WORKFLOW_ID:latest $DOCKER_USER/capstone-app-$CIRCLE_WORKFLOW_ID
          docker push $DOCKER_USER/capstone-app-$CIRCLE_WORKFLOW_ID
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip             
      - run:
          name: Ensure infrastructure to run app exist
          command: |
            aws cloudformation deploy \
              --stack-name capstone-app-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/appec2.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
            
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters Name=tag:Name,Values=capstone-* --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns


  deploy-app-ec2:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            echo ${CIRCLE_WORKFLOW_ID}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["a7:23:6d:9d:6e:ac:87:5d:f3:3c:e9:9d:fd:af:15:3b"] #get it from CircleCI -> Project Settings -> SSH Keys -> Additional SSH Keys
      - run:
          name: Configure server via ansible to deploy the backend
          no_output_timeout: 30m
          command: |
            
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy.yml

workflows:
  default:
     jobs:
       #- build-app
       #- deploy-infrastructure
       - build-container
           
